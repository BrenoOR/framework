syntax = "proto2";
option cc_enable_arenas = true;

import "world.proto";
import "robot.proto";
import "ssl_refbox_remotecontrol.proto";

package amun;

message SimulatorMoveBall {
    optional float p_x = 1;
    optional float p_y = 2;
    optional float p_z = 6;
    optional bool position = 3 [default = false]; // set pos and speed to given values
    optional float v_x = 4;
    optional float v_y = 5;
    optional float v_z = 7;
    optional bool teleport_safely = 8 [default = false]; // move robots out of the way in case of collision and set speed of robots closeby to zero
}

message SimulatorMoveRobot {
    required uint32 id = 1;
    optional float p_x = 2;
    optional float p_y = 3;
    optional float phi = 4;
    optional bool position = 5 [default = false]; // set pos and speed to given values
    optional float v_x = 6;
    optional float v_y = 7;
    optional float omega = 8;
}

message RobotMoveCommand {
    required uint32 id = 1;
    optional float p_x = 2;
    optional float p_y = 3;
}

message CameraSetup {
    required uint32 num_cameras = 1;
    // note that this height must always be lower than the room height of the simulator
    required float camera_height = 2;
}

message SimulatorSetup {
    optional world.Geometry geometry = 1;
    optional CameraSetup camera_setup = 2;
}

message SimulatorWorstCaseVision {
    // minimum time between two detections of one robot or ball (in seconds)
    // when the feature is disabled, zero may be set here
    optional float min_robot_detection_time = 1;
    optional float min_ball_detection_time = 2;
}

message CommandSimulator {
    optional bool enable = 1;
    optional int64 vision_delay = 9;
    optional int64 vision_processing_time = 10;
    optional SimulatorMoveBall move_ball = 3;
    repeated SimulatorMoveRobot move_blue = 4;
    repeated SimulatorMoveRobot move_yellow = 5;
    optional float stddev_ball_p = 6;
    optional float stddev_robot_p = 7;
    optional float stddev_robot_phi = 8;
    optional SimulatorSetup simulator_setup = 11;
    optional bool enable_invisible_ball = 12;
    optional float ball_visibility_threshold = 13;
    optional float camera_overlap = 14;
    optional SimulatorWorstCaseVision vision_worst_case = 15;
}

message CommandReferee {
    optional bool active = 1;
    optional bytes command = 2;
    optional bool use_internal_autoref = 3;
    optional SSL_RefereeRemoteControlRequest autoref_command = 4;
    optional bool flipped = 5;
}

message CommandStrategyLoad {
    required string filename = 1;
    optional string entry_point = 2;
}

message CommandStrategyClose {
}

message CommandStrategySetOptions {
    repeated string option = 1;
}

message CommandStrategyTriggerDebugger {
}

message CommandStrategy {
    optional CommandStrategyLoad load = 1;
    optional CommandStrategyClose close = 2;
    optional bool reload = 3;
    optional bool auto_reload = 4;
    optional bool enable_debug = 5;
    optional bool enable_refbox_control = 6;
    optional CommandStrategySetOptions options = 7;
    optional CommandStrategyTriggerDebugger debug = 8;
    optional bool performance_mode = 9;
    optional bool start_profiling = 10;
    optional string finish_and_save_profile = 11;
    optional bool tournament_mode = 12;
}

message CommandControl {
    repeated robot.RadioCommand commands = 1;
}

message TransceiverConfiguration {
    required uint32 channel = 1;
}

message HostAddress {
    required string host = 1;
    required uint32 port = 2;
}

message CommandTransceiver {
    optional bool enable = 1;
    optional bool charge = 2;
    optional TransceiverConfiguration configuration = 3;
    optional HostAddress network_configuration = 4;
    optional bool use_network = 5;
}

message VirtualFieldTransform {
    required float a11 = 1;
    required float a12 = 2;
    required float a21 = 3;
    required float a22 = 4;
    required float offsetX = 5;
    required float offsetY = 6;
}

message CommandTracking {
    optional bool aoi_enabled = 1;
    optional world.TrackingAOI aoi = 2;
    optional int64 system_delay = 3;
    optional bool reset = 4;
    optional bool enable_virtual_field = 5;
    optional VirtualFieldTransform field_transform = 6;
    optional world.Geometry virtual_geometry = 7;
}

message CommandAmun {
    optional uint32 vision_port = 1;
    optional uint32 referee_port = 2;
}

enum DebuggerInputTarget {
    DITStrategyYellow = 0;
    DITStrategyBlue = 1;
    DITAutoref = 2;
}

message CommandDebuggerInputDisable {
}

message CommandDebuggerInputLine {
    optional string line = 1;
}

message CommandDebuggerInput {
    required DebuggerInputTarget strategy_type = 1;
    optional CommandDebuggerInputDisable disable = 2;
    optional CommandDebuggerInputLine queue_line = 3;
}

enum PauseSimulatorReason {
    Ui = 1;
    WindowFocus = 2;
    DebugBlueStrategy = 3;
    DebugYellowStrategy = 4;
    DebugAutoref = 5;
    Replay = 6;
    Horus = 7;
    Logging = 8;
}

message PauseSimulatorCommand {
    required PauseSimulatorReason reason = 1;
    optional bool pause = 2;
    optional bool toggle = 3;
}

message CommandReplay {
    // replay in general, not any specific strategy. This may be enabled even when no strategy is replayed
    optional bool enable = 1;
    optional bool enable_blue_strategy = 2;
    optional CommandStrategy blue_strategy = 3;
    optional bool enable_yellow_strategy = 4;
    optional CommandStrategy yellow_strategy = 5;
}

message Command {
    optional CommandSimulator simulator = 1;
    optional CommandReferee referee = 2;
    optional robot.Team set_team_blue = 3;
    optional robot.Team set_team_yellow = 4;
    optional CommandStrategy strategy_blue = 5;
    optional CommandStrategy strategy_yellow = 6;
    optional CommandStrategy strategy_autoref = 7;
    optional CommandControl control = 8;
    optional CommandTransceiver transceiver = 9;
    optional float speed = 10;
    optional CommandTracking tracking = 11;
    optional CommandAmun amun = 12;
    optional HostAddress mixed_team_destination = 13;
    repeated RobotMoveCommand robot_move_blue = 14;
    repeated RobotMoveCommand robot_move_yellow = 15;
    optional CommandDebuggerInput debugger_input = 16;
    optional uint32 remote_control_port = 17;
    optional PauseSimulatorCommand pause_simulator = 18;
    optional CommandReplay replay = 19;
}
