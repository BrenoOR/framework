From 1cc494094b7dd4948093ef5ba07ffb757b1c4d84 Mon Sep 17 00:00:00 2001
From: Michael Eischer <michael.eischer@robotics-erlangen.de>
Date: Wed, 22 Aug 2018 00:41:18 +0200
Subject: [PATCH] build-mingw-build

---
 .patched                             |  1 +
 config/BUILD.gn                      | 51 ++++++++++++++-----------
 config/BUILDCONFIG.gn                |  1 +
 config/compiler/BUILD.gn             | 57 ++++++++++++++++------------
 config/win/BUILD.gn                  | 31 ++++++++++++++-
 config/win/manifest.gni              |  2 +-
 config/win/visual_studio_version.gni |  2 +
 toolchain/gcc_toolchain.gni          | 24 ++++++++++--
 toolchain/win/BUILD.gn               | 41 ++++++++++++++++++++
 win/BUILD.gn                         |  2 +-
 10 files changed, 158 insertions(+), 54 deletions(-)
 create mode 100644 .patched

diff --git a/.patched b/.patched
new file mode 100644
index 000000000..e1e8f4b04
--- /dev/null
+++ b/.patched
@@ -0,0 +1 @@
+6a41721a2889b84cb2f3b920fbdc40b96347597a
\ No newline at end of file
diff --git a/config/BUILD.gn b/config/BUILD.gn
index 997cdc85e..5869adfac 100644
--- a/config/BUILD.gn
+++ b/config/BUILD.gn
@@ -209,32 +209,34 @@ config("default_libs") {
     # instead the targets that use the less common ones (e.g. wininet or
     # winspool) should include those explicitly.
     libs = [
-      "advapi32.lib",
-      "comdlg32.lib",
-      "dbghelp.lib",
-      "dnsapi.lib",
-      "gdi32.lib",
-      "msimg32.lib",
-      "odbc32.lib",
-      "odbccp32.lib",
-      "oleaut32.lib",
-      "psapi.lib",
-      "shell32.lib",
-      "shlwapi.lib",
-      "user32.lib",
-      "usp10.lib",
-      "uuid.lib",
-      "version.lib",
-      "wininet.lib",
-      "winmm.lib",
-      "winspool.lib",
-      "ws2_32.lib",
+      "advapi32",
+      "comdlg32",
+      "dbghelp",
+      "dnsapi",
+      "gdi32",
+      "msimg32",
+      "odbc32",
+      "odbccp32",
+      "oleaut32",
+      "psapi",
+      "shell32",
+      "shlwapi",
+      "user32",
+      "usp10",
+      "uuid",
+      "version",
+      "wininet",
+      "winmm",
+      "winspool",
+      "ws2_32",
 
       # Please don't add more stuff here. We should actually be making this
       # list smaller, since all common things should be covered. If you need
       # some extra libraries, please just add a libs = [ "foo.lib" ] to your
       # target that needs it.
     ]
+    # keep the binary size from exploding
+    ldflags = [ "-Wl,-s" ]
     if (current_os == "winuwp") {
       # These libraries are needed for Windows UWP (i.e. store apps).
       libs += [
@@ -244,11 +246,14 @@ config("default_libs") {
     } else {
       # These libraries are not compatible with Windows UWP (i.e. store apps.)
       libs += [
-        "delayimp.lib",
-        "kernel32.lib",
-        "ole32.lib",
+        "delayimp",
+        "kernel32",
+        "ole32",
       ]
     }
+    if (is_mingw) {
+        libs += [ "ssp" ]
+    }
   } else if (is_android) {
     libs = [
       "dl",
diff --git a/config/BUILDCONFIG.gn b/config/BUILDCONFIG.gn
index 0c1b861fb..561e201bb 100644
--- a/config/BUILDCONFIG.gn
+++ b/config/BUILDCONFIG.gn
@@ -301,6 +301,7 @@ if (current_os == "win" || current_os == "winuwp") {
   is_nacl = false
   is_posix = false
   is_win = true
+  is_mingw = true
 } else if (current_os == "mac") {
   is_aix = false
   is_android = false
diff --git a/config/compiler/BUILD.gn b/config/compiler/BUILD.gn
index 24bf37b2c..77007bd37 100644
--- a/config/compiler/BUILD.gn
+++ b/config/compiler/BUILD.gn
@@ -233,7 +233,7 @@ config("compiler") {
 
   # In general, Windows is totally different, but all the other builds share
   # some common GCC configuration.
-  if (!is_win) {
+  if (!is_win || is_mingw) {
     # Common POSIX compiler flags setup.
     # --------------------------------
     cflags += [ "-fno-strict-aliasing" ]  # See http://crbug.com/32204
@@ -259,6 +259,8 @@ config("compiler") {
         # Not available on aix.
         cflags += [ "-fstack-protector" ]
       }
+    } else if (is_mingw) {
+        cflags += [ "-fstack-protector" ]
     }
 
     # Linker warnings.
@@ -284,7 +286,7 @@ config("compiler") {
   # Eliminate build metadata (__DATE__, __TIME__ and __TIMESTAMP__) for
   # deterministic build.  See https://crbug.com/314403
   if (!is_official_build) {
-    if (is_win && !is_clang) {
+    if (is_win && !is_clang && !is_mingw) {
       cflags += [
         "/wd4117",  # Trying to define or undefine a predefined macro.
         "/D__DATE__=",
@@ -364,7 +366,7 @@ config("compiler") {
 
   # Linux/Android/Fuchsia common flags setup.
   # ---------------------------------
-  if (is_linux || is_android || is_fuchsia) {
+  if (is_linux || is_android || is_fuchsia || is_mingw) {
     if (use_pic) {
       cflags += [ "-fPIC" ]
       ldflags += [ "-fPIC" ]
@@ -376,6 +378,7 @@ config("compiler") {
       cflags += [ "-pipe" ]
     }
 
+    if (!is_mingw) {
     ldflags += [
       "-Wl,-z,noexecstack",
       "-Wl,-z,now",
@@ -387,6 +390,7 @@ config("compiler") {
         "-Wl,--as-needed",
       ]
     }
+    }
   }
 
   # Linux-specific compiler flags setup.
@@ -480,7 +484,7 @@ config("compiler") {
     # TODO(thakis): Make the driver pass --color-diagnostics to the linker
     # if -fcolor-diagnostics is passed to it, and pass -fcolor-diagnostics
     # in ldflags instead.
-    if (is_win) {
+    if (is_win && !is_mingw) {
       # On Windows, we call the linker directly, instead of calling it through
       # the driver.
       ldflags += [ "--color-diagnostics" ]
@@ -540,7 +544,7 @@ config("compiler") {
 
   # C11/C++11 compiler flags setup.
   # ---------------------------
-  if (is_linux || is_android || (is_nacl && is_clang) || current_os == "aix") {
+  if (is_linux || is_android || (is_nacl && is_clang) || current_os == "aix" || is_mingw) {
     if (target_os == "android") {
       cxx11_override = use_cxx11_on_android
     } else {
@@ -715,7 +719,7 @@ config("compiler_cpu_abi") {
   ldflags = []
   defines = []
 
-  if ((is_posix && !(is_mac || is_ios)) || is_fuchsia) {
+  if ((is_posix && !(is_mac || is_ios)) || is_fuchsia || is_mingw) {
     # CPU architecture. We may or may not be doing a cross compile now, so for
     # simplicity we always explicitly set the architecture.
     if (current_cpu == "x64") {
@@ -1183,7 +1187,7 @@ config("default_warnings") {
   cflags_cc = []
   ldflags = []
 
-  if (is_win) {
+  if (is_win && !is_mingw) {
     if (treat_warnings_as_errors) {
       cflags += [ "/WX" ]
     }
@@ -1401,11 +1405,14 @@ config("default_warnings") {
       # comments
       # https://gcc.gnu.org/bugzilla/show_bug.cgi?id=61638
       cflags += [ "-Wno-comments" ]
+      cflags += [ "-Wno-format" ]
+      cflags += [ "-Wno-attributes" ]
+      cflags += [ "-Wno-unused-but-set-variable" ]
     }
   }
 
   # Common Clang and GCC warning setup.
-  if (!is_win || is_clang) {
+  if (!is_win || is_clang || is_mingw) {
     cflags += [
       # Disables.
       "-Wno-missing-field-initializers",  # "struct foo f = {0};"
@@ -1489,7 +1496,7 @@ config("default_warnings") {
 # part of Chromium.
 
 config("chromium_code") {
-  if (is_win) {
+  if (is_win && !is_mingw) {
     cflags = [ "/W4" ]  # Warning level 4.
 
     if (is_clang) {
@@ -1561,7 +1568,7 @@ config("no_chromium_code") {
   cflags_cc = []
   defines = []
 
-  if (is_win) {
+  if (is_win && !is_mingw) {
     cflags += [
       "/W3",  # Warning level 3.
       "/wd4800",  # Disable warning when forcing value to bool.
@@ -1614,7 +1621,7 @@ config("noshadowing") {
 # Allows turning Run-Time Type Identification on or off.
 
 config("rtti") {
-  if (is_win) {
+  if (is_win && !is_mingw) {
     cflags_cc = [ "/GR" ]
   } else {
     cflags_cc = [ "-frtti" ]
@@ -1624,7 +1631,7 @@ config("rtti") {
 config("no_rtti") {
   # Some sanitizer configs may require RTTI to be left enabled globally
   if (!use_rtti) {
-    if (is_win) {
+    if (is_win && !is_mingw) {
       cflags_cc = [ "/GR-" ]
     } else {
       cflags_cc = [ "-fno-rtti" ]
@@ -1661,7 +1668,7 @@ config("thin_archive") {
 # Note: exceptions are disallowed in Google code.
 
 config("exceptions") {
-  if (is_win) {
+  if (is_win && !is_mingw) {
     # Enables exceptions in the STL.
     if (!use_custom_libcxx) {
       defines = [ "_HAS_EXCEPTIONS=1" ]
@@ -1674,7 +1681,7 @@ config("exceptions") {
 }
 
 config("no_exceptions") {
-  if (is_win) {
+  if (is_win && !is_mingw) {
     # Disables exceptions in the STL.
     # libc++ uses the __has_feature macro to control whether to use exceptions,
     # so defining this macro is unnecessary. Defining _HAS_EXCEPTIONS to 0 also
@@ -1713,7 +1720,7 @@ config("wexit_time_destructors") {
 #
 # TODO(jschuh): crbug.com/167187 fix this and delete this config.
 config("no_size_t_to_int_warning") {
-  if (is_win && current_cpu == "x64") {
+  if (is_win && !is_mingw && current_cpu == "x64") {
     cflags = [ "/wd4267" ]
   }
 }
@@ -1748,7 +1755,7 @@ config("no_incompatible_pointer_warnings") {
 
 # Shared settings for both "optimize" and "optimize_max" configs.
 # IMPORTANT: On Windows "/O1" and "/O2" must go before the common flags.
-if (is_win) {
+if (is_win && !is_mingw) {
   common_optimize_on_cflags = [
     "/Ob2",  # Both explicit and auto inlining.
     "/Oy-",  # Disable omitting frame pointers, must be after /O2.
@@ -1844,7 +1851,7 @@ if (is_win) {
 }
 
 config("default_stack_frames") {
-  if (is_posix || is_fuchsia) {
+  if (is_posix || is_fuchsia || is_mingw) {
     if (enable_frame_pointers) {
       cflags = [ "-fno-omit-frame-pointer" ]
     } else {
@@ -1864,7 +1871,7 @@ config("default_stack_frames") {
 
 # Default "optimization on" config.
 config("optimize") {
-  if (is_win) {
+  if (is_win && !is_mingw) {
     # TODO(thakis): Remove is_clang here, https://crbug.com/598772
     if (is_official_build && full_wpo_on_official && !is_clang) {
       common_optimize_on_cflags += [
@@ -1898,7 +1905,7 @@ config("optimize") {
 
 # Same config as 'optimize' but without the WPO flag.
 config("optimize_no_wpo") {
-  if (is_win) {
+  if (is_win && !is_mingw) {
     # Favor size over speed, /O1 must be before the common flags. The GYP
     # build also specifies /Os and /GF but these are implied by /O1.
     cflags = [ "/O1" ] + common_optimize_on_cflags + [ "/Oi" ]
@@ -1921,7 +1928,7 @@ config("optimize_no_wpo") {
 
 # Turn off optimizations.
 config("no_optimize") {
-  if (is_win) {
+  if (is_win && !is_mingw) {
     cflags = [
       "/Od",  # Disable optimization.
       "/Ob0",  # Disable all inlining (on by default).
@@ -1957,7 +1964,7 @@ config("optimize_max") {
     configs = [ "//build/config/nacl:irt_optimize" ]
   } else {
     ldflags = common_optimize_on_ldflags
-    if (is_win) {
+    if (is_win && !is_mingw) {
       # Favor speed over size, /O2 must be before the common flags. The GYP
       # build also specifies /Ot, /Oi, and /GF, but these are implied by /O2.
       cflags = [ "/O2" ] + common_optimize_on_cflags
@@ -2004,7 +2011,7 @@ config("optimize_speed") {
     configs = [ "//build/config/nacl:irt_optimize" ]
   } else {
     ldflags = common_optimize_on_ldflags
-    if (is_win) {
+    if (is_win && !is_mingw) {
       # Favor speed over size, /O2 must be before the common flags. The GYP
       # build also specifies /Ot, /Oi, and /GF, but these are implied by /O2.
       cflags = [ "/O2" ] + common_optimize_on_cflags
@@ -2116,7 +2123,7 @@ config("afdo") {
 
 # Full symbols.
 config("symbols") {
-  if (is_win) {
+  if (is_win && !is_mingw) {
     if (use_goma || is_clang) {
       # Note that with VC++ this requires is_win_fastlink, enforced elsewhere.
       cflags = [ "/Z7" ]  # Debug information in the .obj files.
@@ -2214,7 +2221,7 @@ config("symbols") {
 # This config guarantees to hold symbol for stack trace which are shown to user
 # when crash happens in unittests running on buildbot.
 config("minimal_symbols") {
-  if (is_win) {
+  if (is_win && !is_mingw) {
     # Linker symbols for backtraces only.
     cflags = []
     ldflags = [ "/DEBUG" ]
@@ -2245,7 +2252,7 @@ config("minimal_symbols") {
 
 # No symbols.
 config("no_symbols") {
-  if (!is_win) {
+  if (is_win && !is_mingw) {
     cflags = [ "-g0" ]
     asmflags = cflags
   }
diff --git a/config/win/BUILD.gn b/config/win/BUILD.gn
index 02895ad35..96c9a2b18 100644
--- a/config/win/BUILD.gn
+++ b/config/win/BUILD.gn
@@ -42,6 +42,7 @@ declare_args() {
 # is applied to all targets. It is here to separate out the logic that is
 # Windows-only.
 config("compiler") {
+  if(!is_mingw){
   if (current_cpu == "x86") {
     asmflags = [
       # When /safeseh is specified, the linker will only produce an image if it
@@ -145,6 +146,13 @@ config("compiler") {
     # the source file is a no-op.
     "/ignore:4221",
   ]
+  } else {
+    if (current_cpu == "x86") {
+      cflags = [ "-m32" ]
+    } else {
+      cflags = [ "-m64" ]
+    }
+  }
 }
 
 config("vs_code_analysis") {
@@ -293,6 +301,7 @@ config("sdk_link") {
   assert(current_cpu == "x64" || current_cpu == "x86" || current_cpu == "arm" ||
              current_cpu == "arm64",
          "Only supports x64, x86, arm and arm64 CPUs")
+if (!is_mingw) {
   if (current_cpu == "x64") {
     ldflags = [ "/MACHINE:X64" ]
   } else if (current_cpu == "x86") {
@@ -331,12 +340,14 @@ config("sdk_link") {
   if (defined(vc_lib_atlmfc_path)) {
     lib_dirs += [ "$vc_lib_atlmfc_path" ]
   }
+  }
 }
 
 # This default linker setup is provided separately from the SDK setup so
 # targets who want different library configurations can remove this and specify
 # their own.
 config("common_linker_setup") {
+  if (!is_mingw) {
   ldflags = [
     "/fastfail",
     "/FIXED:NO",
@@ -352,6 +363,7 @@ config("common_linker_setup") {
       "/verbose:incr",
     ]
   }
+  }
 }
 
 config("cfi_linker") {
@@ -364,7 +376,7 @@ config("cfi_linker") {
   # ASan and CFG leads to slow process startup. Chromium's test runner uses
   # lots of child processes, so this means things are really slow. Disable CFG
   # for now. https://crbug.com/846966
-  if (!is_debug && !is_component_build && !is_asan) {
+  if (!is_mingw && !is_debug && !is_component_build && !is_asan) {
     # Turn on CFG in msvc linker, regardless of compiler used. Turn off CFG for
     # longjmp (new in VS 2017) because it relies on compiler support which we do
     # not have enabled.
@@ -401,14 +413,17 @@ config("default_crt") {
 # debug CRT is part of the bottleneck. This also avoids *implicitly* defining
 # _DEBUG.
 config("release_crt") {
+if (!is_mingw) {
   if (is_component_build) {
     cflags = [ "/MD" ]
   } else {
     cflags = [ "/MT" ]
   }
 }
+}
 
 config("dynamic_crt") {
+if (!is_mingw) {
   if (is_debug) {
     # This pulls in the DLL debug CRT and defines _DEBUG
     cflags = [ "/MDd" ]
@@ -416,18 +431,22 @@ config("dynamic_crt") {
     cflags = [ "/MD" ]
   }
 }
+}
 
 config("static_crt") {
+  if (!is_mingw) {
   if (is_debug) {
     # This pulls in the static debug CRT and defines _DEBUG
     cflags = [ "/MTd" ]
   } else {
     cflags = [ "/MT" ]
   }
+  }
 }
 
 # Subsystem --------------------------------------------------------------------
 
+if (!is_mingw) {
 # This is appended to the subsystem to specify a minimum version.
 if (current_cpu == "x64") {
   # The number after the comma is the minimum required OS version.
@@ -437,16 +456,22 @@ if (current_cpu == "x64") {
   # 5.01 = Windows XP.
   subsystem_version_suffix = ",5.01"
 }
+}
 
 config("console") {
+  if (!is_mingw) {
   ldflags = [ "/SUBSYSTEM:CONSOLE$subsystem_version_suffix" ]
+  }
 }
 config("windowed") {
+  if (!is_mingw) {
   ldflags = [ "/SUBSYSTEM:WINDOWS$subsystem_version_suffix" ]
+  }
 }
 
 # Incremental linking ----------------------------------------------------------
 
+if (!is_mingw) {
 incremental_linking_on_switch = [ "/INCREMENTAL" ]
 if ((!is_debug && !is_component_build) || !use_lld) {
   incremental_linking_off_switch = [ "/INCREMENTAL:NO" ]
@@ -454,6 +479,10 @@ if ((!is_debug && !is_component_build) || !use_lld) {
 if (use_lld) {
   incremental_linking_on_switch += [ "/OPT:NOREF" ]
 }
+} else {
+  incremental_linking_off_switch = []
+  incremental_linking_on_switch = []
+}
 
 # Enable incremental linking for debug builds and all component builds - any
 # builds where performance is not job one.
diff --git a/config/win/manifest.gni b/config/win/manifest.gni
index b18a4a141..62bf3a0af 100644
--- a/config/win/manifest.gni
+++ b/config/win/manifest.gni
@@ -66,7 +66,7 @@ require_administrator_manifest = "//build/win/require_administrator.manifest"
 #     ...
 #   }
 
-if (is_win) {
+if (is_win && !is_mingw) {
   template("windows_manifest") {
     config_name = "${target_name}__config"
     source_set_name = target_name
diff --git a/config/win/visual_studio_version.gni b/config/win/visual_studio_version.gni
index 982fbe8d3..a2b717107 100644
--- a/config/win/visual_studio_version.gni
+++ b/config/win/visual_studio_version.gni
@@ -22,6 +22,7 @@ declare_args() {
   windows_sdk_path = "C:\Program Files (x86)\Windows Kits\10"
 }
 
+if (!is_mingw){
 if (visual_studio_path == "") {
   toolchain_data =
       exec_script("../../vs_toolchain.py", [ "get_toolchain_dir" ], "scope")
@@ -37,3 +38,4 @@ if (visual_studio_path == "") {
          "You must set the wdk_path if you set the visual studio path")
   visual_studio_runtime_dirs = []
 }
+}
diff --git a/toolchain/gcc_toolchain.gni b/toolchain/gcc_toolchain.gni
index b6f63d755..f4e0eb570 100644
--- a/toolchain/gcc_toolchain.gni
+++ b/toolchain/gcc_toolchain.gni
@@ -187,6 +187,7 @@ template("gcc_toolchain") {
     if (!defined(asm)) {
       asm = cc
     }
+    if (!is_mingw) {
     if (defined(invoker.readelf)) {
       readelf = invoker.readelf
     } else {
@@ -197,6 +198,7 @@ template("gcc_toolchain") {
     } else {
       nm = "nm"
     }
+    }
 
     if (defined(invoker.shlib_extension)) {
       default_shlib_extension = invoker.shlib_extension
@@ -363,11 +365,13 @@ template("gcc_toolchain") {
       sofile = "{{output_dir}}/$soname"  # Possibly including toolchain dir.
       rspfile = sofile + ".rsp"
       pool = "//build/toolchain:link_pool($default_toolchain)"
+      if (!is_mingw) {
       whitelist_flag = " "
       if (enable_resource_whitelist_generation) {
         whitelist_file = "$sofile.whitelist"
         whitelist_flag = " --resource-whitelist=\"$whitelist_file\""
       }
+      }
 
       if (defined(invoker.strip)) {
         unstripped_sofile = "{{root_out_dir}}/lib.unstripped/$soname"
@@ -379,13 +383,16 @@ template("gcc_toolchain") {
       # implement (1) linking to produce a .so, (2) extracting the symbols
       # from that file (3) if the extracted list differs from the existing
       # .TOC file, overwrite it, otherwise, don't change it.
+      if (!is_mingw) {
       tocfile = sofile + ".TOC"
+      }
 
       link_command = "$ld -shared {{ldflags}}${extra_ldflags} -o \"$unstripped_sofile\" -Wl,-soname=\"$soname\" @\"$rspfile\""
 
       # Generate a map file to be used for binary size analysis.
       # Map file adds ~10% to the link time on a z620.
       # With target_os="android", libchrome.so.map.gz is ~20MB.
+      if (!is_mingw) {
       map_switch = ""
       if (enable_linker_map && is_official_build) {
         map_file = "$unstripped_sofile.map.gz"
@@ -404,8 +411,12 @@ template("gcc_toolchain") {
       # The host might not have a POSIX shell and utilities (e.g. Windows).
       solink_wrapper =
           rebase_path("//build/toolchain/gcc_solink_wrapper.py", root_build_dir)
+      }
+      if (is_mingw) {
+        command = "$link_command"
+      } else {
       command = "$python_path \"$solink_wrapper\" --readelf=\"$readelf\" --nm=\"$nm\" $strip_switch--sofile=\"$unstripped_sofile\" --tocfile=\"$tocfile\"$map_switch --output=\"$sofile\"$whitelist_flag -- $link_command"
-
+      }
       if (target_cpu == "mipsel" && is_component_build && is_android) {
         rspfile_content = "-Wl,--start-group -Wl,--whole-archive {{inputs}} {{solibs}} -Wl,--no-whole-archive $solink_libs_section_prefix {{libs}} $solink_libs_section_postfix -Wl,--end-group"
       } else {
@@ -435,8 +446,10 @@ template("gcc_toolchain") {
       # tocfile for dependency management.
       outputs = [
         sofile,
-        tocfile,
       ]
+      if (!is_mingw) {
+        outputs += [ tocfile ]
+      }
       if (enable_resource_whitelist_generation) {
         outputs += [ whitelist_file ]
       }
@@ -451,7 +464,12 @@ template("gcc_toolchain") {
         outputs += [ map_file ]
       }
       link_output = sofile
-      depend_output = tocfile
+
+      if (is_mingw) {
+      depend_output = sofile
+      } else {
+        depend_output = tocfile
+      }
     }
 
     tool("solink_module") {
diff --git a/toolchain/win/BUILD.gn b/toolchain/win/BUILD.gn
index eb3e2b2b3..3cac88626 100644
--- a/toolchain/win/BUILD.gn
+++ b/toolchain/win/BUILD.gn
@@ -9,6 +9,7 @@ import("//build/config/win/visual_studio_version.gni")
 import("//build/toolchain/clang_static_analyzer.gni")
 import("//build/toolchain/goma.gni")
 import("//build/toolchain/toolchain.gni")
+import("//build/toolchain/gcc_toolchain.gni")
 
 # Should only be running on Windows.
 assert(is_win)
@@ -19,6 +20,7 @@ assert(is_win)
 # "environment.x86" and "environment.x64" to the build directory and return a
 # list to us.
 
+if (!is_mingw) {
 # This tool will is used as a wrapper for various commands below.
 tool_wrapper_path = rebase_path("tool_wrapper.py", root_build_dir)
 
@@ -502,3 +504,42 @@ if (target_os == "winuwp") {
     }
   }
 }
+}
+
+gcc_toolchain("gcc_x86") {
+  cc = "gcc"
+  cxx = "g++"
+
+  #readelf = "readelf"
+  #nm = "nm"
+  ar = "ar"
+  ld = cxx
+
+  # Output linker map files for binary size analysis.
+  enable_linker_map = true
+
+  toolchain_args = {
+    current_cpu = "x86"
+    current_os = "win"
+    is_clang = false
+  }
+}
+
+gcc_toolchain("gcc_x64") {
+  cc = "gcc"
+  cxx = "g++"
+
+  #readelf = "readelf"
+  #nm = "nm"
+  ar = "ar"
+  ld = cxx
+
+  # Output linker map files for binary size analysis.
+  enable_linker_map = true
+
+  toolchain_args = {
+    current_cpu = "x64"
+    current_os = "win"
+    is_clang = false
+  }
+}
diff --git a/win/BUILD.gn b/win/BUILD.gn
index 12d61c86b..65e962366 100644
--- a/win/BUILD.gn
+++ b/win/BUILD.gn
@@ -16,7 +16,7 @@ windows_manifest("default_exe_manifest") {
   ]
 }
 
-if (is_win) {
+if (is_win && !is_mingw) {
   action("copy_cdb_to_output") {
     script = "//build/win/copy_cdb_to_output.py"
     inputs = [
-- 
2.23.0

